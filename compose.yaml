services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: postgres
    ports:
      - '5432:5432'
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - mynetwork

  redis:
    image: redis:alpine
    ports:
      - '6379:6379'
    networks:
      - mynetwork

  ngrok:
    image: wernight/ngrok
    command: ngrok http nest-app:3000
    ports:
      - '4040:4040'
    env_file:
      - .env
    networks:
      - mynetwork

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - mynetwork

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - mynetwork

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.ml.enabled=false
    ports:
      - '9200:9200'
    healthcheck:
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - mynetwork

  nest-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - elasticsearch
      - kafka
      - zookeeper
    networks:
      - mynetwork

volumes:
  es_data:
  db_data:

networks:
  mynetwork:
    driver: bridge
